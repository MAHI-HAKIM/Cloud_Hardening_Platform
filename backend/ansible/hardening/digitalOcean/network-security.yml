---
- name: "HARDENING 2: Network Security & Service Management"
  hosts: all
  become: yes
  tasks:
    # Network Security Hardening
    - name: "Apply Network Security Settings"
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
        sysctl_file: /etc/sysctl.d/99-security.conf
      loop:
        - { name: "net.ipv4.ip_forward", value: "0" }
        - { name: "net.ipv4.tcp_syncookies", value: "1" }
        - { name: "net.ipv4.conf.all.accept_redirects", value: "0" }
        - { name: "net.ipv4.conf.default.accept_redirects", value: "0" }
        - { name: "net.ipv4.conf.all.send_redirects", value: "0" }
        - { name: "net.ipv4.conf.default.send_redirects", value: "0" }
        - { name: "net.ipv4.conf.all.accept_source_route", value: "0" }
        - { name: "net.ipv4.conf.default.accept_source_route", value: "0" }
        - { name: "net.ipv4.icmp_echo_ignore_broadcasts", value: "1" }
        - { name: "net.ipv4.icmp_ignore_bogus_error_responses", value: "1" }
      register: network_hardening

    # Disable Unnecessary Services
    - name: "Check for risky services"
      systemd:
        name: "{{ item }}"
      loop:
        - telnet
        - rsh
        - rlogin
        - tftp
        - finger
        - talk
      register: service_status
      ignore_errors: yes

    - name: "Disable risky services if they exist"
      systemd:
        name: "{{ item.item }}"
        state: stopped
        enabled: no
      loop: "{{ service_status.results }}"
      when:
        - item.status is defined
        - item.status.LoadState == "loaded"
      register: services_disabled
      ignore_errors: yes

    # Password Policy Configuration
    - name: "Configure password aging policy"
      lineinfile:
        path: /etc/login.defs
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
        backup: yes
      loop:
        - { regexp: "^PASS_MIN_DAYS", line: "PASS_MIN_DAYS 1" }
        - { regexp: "^PASS_MAX_DAYS", line: "PASS_MAX_DAYS 90" }
        - { regexp: "^PASS_MIN_LEN", line: "PASS_MIN_LEN 8" }
        - { regexp: "^PASS_WARN_AGE", line: "PASS_WARN_AGE 7" }
      register: password_policy

    # Enable System Logging
    - name: "Ensure rsyslog is installed"
      package:
        name: rsyslog
        state: present
      register: rsyslog_installed

    - name: "Enable and start logging services"
      systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - rsyslog
        - systemd-journald
      register: logging_enabled
      ignore_errors: yes

    # Configure log rotation
    - name: "Configure log rotation for security logs"
      copy:
        content: |
          /var/log/auth.log {
              weekly
              missingok
              rotate 52
              compress
              delaycompress
              notifempty
              create 640 root adm
          }
          /var/log/syslog {
              weekly
              missingok
              rotate 52
              compress
              delaycompress
              notifempty
              create 640 root adm
          }
        dest: /etc/logrotate.d/security-logs
        mode: "0644"
        owner: root
        group: root
      register: logrotate_configured

    # Basic Firewall Setup (UFW)
    - name: "Install UFW firewall"
      package:
        name: ufw
        state: present
      register: ufw_installed

    - name: "Reset UFW to defaults"
      ufw:
        state: reset
      register: ufw_reset
      ignore_errors: yes

    - name: "Set UFW default policies"
      ufw:
        policy: "{{ item.policy }}"
        direction: "{{ item.direction }}"
      loop:
        - { policy: "deny", direction: "incoming" }
        - { policy: "allow", direction: "outgoing" }
      register: ufw_policies

    - name: "Allow SSH through firewall"
      ufw:
        rule: allow
        port: "{{ ansible_port | default('22') }}"
        proto: tcp
        comment: "SSH Access"
      register: ssh_allowed

    - name: "Enable UFW firewall"
      ufw:
        state: enabled
      register: ufw_enabled

    - name: "Display Hardening 2 Results"
      debug:
        msg: |
          =================== HARDENING 2 COMPLETE ===================

          NETWORK SECURITY:
          - IP Forwarding: {{ 'DISABLED' if network_hardening.changed else 'ALREADY DISABLED' }}
          - TCP SYN Cookies: {{ 'ENABLED' if network_hardening.changed else 'ALREADY ENABLED' }}
          - ICMP Redirects: {{ 'BLOCKED' if network_hardening.changed else 'ALREADY BLOCKED' }}
          - Source Routing: {{ 'DISABLED' if network_hardening.changed else 'ALREADY DISABLED' }}
          - ICMP Broadcast: {{ 'IGNORED' if network_hardening.changed else 'ALREADY IGNORED' }}

          SERVICE MANAGEMENT:
          - Risky services checked: {{ service_status.results | length }}
          - Services disabled: {{ services_disabled.results | selectattr('changed', 'equalto', true) | list | length }}

          PASSWORD POLICY:
          - Min password age: {{ 'SET (1 day)' if password_policy.changed else 'ALREADY SET' }}
          - Max password age: {{ 'SET (90 days)' if password_policy.changed else 'ALREADY SET' }}
          - Min password length: {{ 'SET (8 chars)' if password_policy.changed else 'ALREADY SET' }}
          - Warning period: {{ 'SET (7 days)' if password_policy.changed else 'ALREADY SET' }}

          LOGGING:
          - Rsyslog: {{ 'INSTALLED' if rsyslog_installed.changed else 'ALREADY INSTALLED' }}
          - Logging services: {{ logging_enabled.results | selectattr('changed', 'equalto', true) | list | length }} enabled
          - Log rotation: {{ 'CONFIGURED' if logrotate_configured.changed else 'ALREADY CONFIGURED' }}

          FIREWALL:
          - UFW installed: {{ 'INSTALLED' if ufw_installed.changed else 'ALREADY INSTALLED' }}
          - Default policies: {{ 'SET' if ufw_policies.changed else 'ALREADY SET' }}
          - SSH access: {{ 'ALLOWED' if ssh_allowed.changed else 'ALREADY ALLOWED' }}
          - UFW status: {{ 'ENABLED' if ufw_enabled.changed else 'ALREADY ENABLED' }}

          ==========================================================
